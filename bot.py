import asyncio
import logging
import os
from dataclasses import dataclass
from datetime import datetime, timezone, timedelta
from typing import Optional

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from dotenv import load_dotenv

# -------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ --------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()
r = Router()
dp.include_router(r)

# -------------------- –¢–µ–∫—Å—Ç—ã --------------------
INTRO_BTN = "–•–æ—á—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ë–∞-–¶–∑—ã"
INTRO_TEXT = (
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ë–∞-–¶–∑—ã ‚Äî —ç—Ç–æ —Ä–∞–∑–±–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –µ–≥–æ —Å—É–¥—å–±—ã –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ "
    "–∫–∏—Ç–∞–π—Å–∫–æ–π –º–µ—Ç–∞—Ñ–∏–∑–∏–∫–∏ ‚òØÔ∏è –†–∞–∑–±–æ—Ä ‚Äî —ç—Ç–æ –≤—Å—Ç—Ä–µ—á–∞ —Å–æ —Å–≤–æ–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —è, —Å —Å–∏–ª—å–Ω—ã–º–∏ –∏ —Å–ª–∞–±—ã–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏ –ª–∏—á–Ω–æ—Å—Ç–∏; "
    "—ç—Ç–æ —è—Å–Ω—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ, —Å–µ–º—å—é, —Ñ–∏–Ω–∞–Ω—Å—ã, –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ –¥—Ä—É–≥–∏–µ –∞—Å–ø–µ–∫—Ç—ã –≤–∞—à–µ–π –∂–∏–∑–Ω–∏."
)

FORMAT_TEXT = (
    "–§–æ—Ä–º–∞—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n\n"
    "ü™∑ –∂–∏–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ –≤ –ú–æ—Å–∫–≤–µ/–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –∏–ª–∏ –æ–Ω–ª–∞–π–Ω —Å–æ–∑–≤–æ–Ω\n"
    "ü™∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ 2 —á–∞—Å–∞\n"
    "ü™∑ –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –±–∞-—Ü–∑—ã\n"
    "ü™∑ —Å—Ç–æ–∏–º–æ—Å—Ç—å 26 000‚ÇΩ"
)

ASK_BIRTH = (
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è: –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥\n"
    "(–µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî –Ω–µ –±–µ–¥–∞, –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è)."
)
ASK_QUERY = "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–≤—ë–ª –≤–∞—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?"
THANKS = "–ë–ª–∞–≥–æ–¥–∞—Ä—é üôå –Ø —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏!"

# -------------------- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è --------------------
class Signup(StatesGroup):
    waiting_birth = State()
    waiting_query = State()

# -------------------- –ú–æ–¥–µ–ª—å –∑–∞—è–≤–∫–∏ --------------------
@dataclass
class Lead:
    user_id: int
    username: Optional[str]
    full_name: str
    started_at: datetime
    birth_data: Optional[str] = None
    query_text: Optional[str] = None
    completed: bool = False

# –ü—É–ª –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –ø–∞–º—è—Ç–∏
pending_leads: dict[int, Lead] = {}

# -------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------------------
def main_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=INTRO_BTN)]],
        resize_keyboard=True
    )

def intro_inline_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ä¢ –§–æ—Ä–º–∞—Ç –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="format")],
        [InlineKeyboardButton(text="‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="signup")]
    ])

def format_inline_kb() -> InlineKeyboardMarkup:
    # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω (intro)
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_intro")]
    ])

def back_to_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

# -------------------- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É --------------------
async def notify_admin_new_attempt(lead: Lead):
    if not ADMIN_CHAT_ID:
        return
    text = (
        "üü° –ù–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ (–ø–æ–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∞)\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {lead.full_name} (@{lead.username or '‚Äî'})\n"
        f"User ID: {lead.user_id}\n"
        f"–ù–∞—á–∞—Ç–æ: {lead.started_at.astimezone(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')}"
    )
    await bot.send_message(ADMIN_CHAT_ID, text)

async def notify_admin_abandoned(lead: Lead):
    if not ADMIN_CHAT_ID:
        return
    text = (
        "üü• –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –ù–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Ç–∞–π–º-–∞—É—Ç)\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {lead.full_name} (@{lead.username or '‚Äî'})\n"
        f"User ID: {lead.user_id}\n"
        f"–ù–∞—á–∞—Ç–æ: {lead.started_at.astimezone(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')}\n\n"
        f"–í–≤–µ–¥–µ–Ω–æ:\n"
        f"‚Äî –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è: {lead.birth_data or '‚Äî'}\n"
        f"‚Äî –ó–∞–ø—Ä–æ—Å: {lead.query_text or '‚Äî'}"
    )
    await bot.send_message(ADMIN_CHAT_ID, text)

async def notify_admin_completed(lead: Lead):
    if not ADMIN_CHAT_ID:
        return
    text = (
        "üü¢ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {lead.full_name} (@{lead.username or '‚Äî'})\n"
        f"User ID: {lead.user_id}\n"
        f"–ó–∞—è–≤–∫–∞:\n"
        f"‚Äî –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è: {lead.birth_data}\n"
        f"‚Äî –ó–∞–ø—Ä–æ—Å: {lead.query_text}\n"
    )
    await bot.send_message(ADMIN_CHAT_ID, text)

# -------------------- –¢–∞–π–º-–∞—É—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ --------------------
ABANDON_TIMEOUT = timedelta(minutes=30)

async def schedule_abandon_check(user_id: int):
    await asyncio.sleep(ABANDON_TIMEOUT.total_seconds())
    lead = pending_leads.get(user_id)
    if lead and not lead.completed:
        await notify_admin_abandoned(lead)
        pending_leads.pop(user_id, None)

# -------------------- –ö–æ–º–∞–Ω–¥—ã --------------------
@r.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb())

@r.message(Command("id"))
async def cmd_id(message: Message):
    await message.answer(f"–í–∞—à chat_id: {message.chat.id}")

# -------------------- –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π --------------------
@r.message(F.text == INTRO_BTN)
async def show_intro(message: Message):
    await message.answer(INTRO_TEXT, reply_markup=intro_inline_kb())

@r.callback_query(F.data == "format")
async def on_format(call: CallbackQuery):
    # –≠–∫—Ä–∞–Ω ¬´–§–æ—Ä–º–∞—Ç –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å¬ª + –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –≤ intro
    await call.message.edit_text(FORMAT_TEXT, reply_markup=format_inline_kb())
    await call.answer()

@r.callback_query(F.data == "back_intro")
async def on_back_intro(call: CallbackQuery):
    # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É (intro) —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    await call.message.edit_text(INTRO_TEXT, reply_markup=intro_inline_kb())
    await call.answer()

@r.callback_query(F.data == "back_to_menu")
async def on_back(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=None)
    await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await call.answer()

@r.callback_query(F.data == "signup")
async def on_signup(call: CallbackQuery, state: FSMContext):
    user = call.from_user
    lead = Lead(
        user_id=user.id,
        username=user.username,
        full_name=f"{user.full_name}",
        started_at=datetime.now(timezone.utc)
    )
    pending_leads[user.id] = lead

    # –°—Ä–∞–∑—É —É–≤–µ–¥–æ–º–∏–º –ø—Ä–æ –ø–æ–ø—ã—Ç–∫—É –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∞–π–º-–∞—É—Ç–∞
    await notify_admin_new_attempt(lead)
    asyncio.create_task(schedule_abandon_check(user.id))

    await state.set_state(Signup.waiting_birth)
    await call.message.edit_text(ASK_BIRTH)
    await call.answer()

@r.message(Signup.waiting_birth, F.text)
async def on_birth_data(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in pending_leads:
        pending_leads[user_id] = Lead(
            user_id=user_id,
            username=message.from_user.username,
            full_name=message.from_user.full_name,
            started_at=datetime.now(timezone.utc),
            birth_data=message.text.strip()
        )
    else:
        pending_leads[user_id].birth_data = message.text.strip()

    await state.set_state(Signup.waiting_query)
    await message.answer(ASK_QUERY)

@r.message(Signup.waiting_query, F.text)
async def on_query(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lead = pending_leads.get(user_id)
    if not lead:
        lead = Lead(
            user_id=user_id,
            username=message.from_user.username,
            full_name=message.from_user.full_name,
            started_at=datetime.now(timezone.utc)
        )
        pending_leads[user_id] = lead

    lead.query_text = message.text.strip()
    lead.completed = True

    await notify_admin_completed(lead)
    await message.answer(THANKS, reply_markup=main_menu_kb())

    await state.clear()
    pending_leads.pop(user_id, None)

# –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –Ω–µ-—Ç–µ–∫—Å—Ç –≤ –º–µ—Å—Ç–∞—Ö, –≥–¥–µ –∂–¥—ë–º —Ç–µ–∫—Å—Ç
@r.message(Signup.waiting_birth)
async def on_birth_unknown(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è.")

@r.message(Signup.waiting_query)
async def on_query_unknown(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.")

# -------------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ --------------------
async def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env")
    if not ADMIN_CHAT_ID:
        logging.warning("ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
