import asyncio
import logging
import os
from dataclasses import dataclass
from datetime import datetime, timezone, timedelta
from typing import Optional

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton
)
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")

bot = Bot(BOT_TOKEN,parse_mode="HTML")
dp = Dispatcher()
r = Router()
dp.include_router(r)

# -------- –¢–µ–∫—Å—Ç—ã --------
INTRO_BTN = "–•–æ—á—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ë–∞-–¶–∑—ã"

BTN_FORMAT = "‚ùì –§–æ—Ä–º–∞—Ç –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å"
BTN_SIGNUP = "‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
BTN_BACK = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
BTN_MENU = "üè† –í –º–µ–Ω—é"
BTN_CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"

INTRO_TEXT = (
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ë–∞-–¶–∑—ã ‚Äî —ç—Ç–æ —Ä–∞–∑–±–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –µ–≥–æ —Å—É–¥—å–±—ã –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ "
    "–∫–∏—Ç–∞–π—Å–∫–æ–π –º–µ—Ç–∞—Ñ–∏–∑–∏–∫–∏ <tg-emoji emoji-id=\"6008095274948366144\">‚òØÔ∏è</tg-emoji>\n\n–†–∞–∑–±–æ—Ä ‚Äî —ç—Ç–æ –≤—Å—Ç—Ä–µ—á–∞ —Å–æ —Å–≤–æ–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —è, —Å —Å–∏–ª—å–Ω—ã–º–∏ –∏ —Å–ª–∞–±—ã–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏ –ª–∏—á–Ω–æ—Å—Ç–∏; "
    "—ç—Ç–æ —è—Å–Ω—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ, —Å–µ–º—å—é, —Ñ–∏–Ω–∞–Ω—Å—ã, –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ –¥—Ä—É–≥–∏–µ –∞—Å–ø–µ–∫—Ç—ã –≤–∞—à–µ–π –∂–∏–∑–Ω–∏."
)

FORMAT_TEXT = (
    "–§–æ—Ä–º–∞—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
    "ü™∑ –∂–∏–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ –≤ –ú–æ—Å–∫–≤–µ/–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –∏–ª–∏ –æ–Ω–ª–∞–π–Ω —Å–æ–∑–≤–æ–Ω\n"
    "ü™∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ 2 —á–∞—Å–∞\n"
    "ü™∑ –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –±–∞-—Ü–∑—ã\n"
    "ü™∑ —Å—Ç–æ–∏–º–æ—Å—Ç—å 26 000‚ÇΩ"
)

ASK_BIRTH = (
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è: –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥\n"
    "<i>(–µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî –Ω–µ –±–µ–¥–∞, –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è).</i>"
)
ASK_QUERY = "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–≤—ë–ª –≤–∞—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?"
THANKS = "–ë–ª–∞–≥–æ–¥–∞—Ä—é üôå –Ø —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏!"

# -------- FSM --------
class Signup(StatesGroup):
    waiting_birth = State()
    waiting_query = State()

# -------- –ú–æ–¥–µ–ª—å –∑–∞—è–≤–∫–∏ --------
@dataclass
class Lead:
    user_id: int
    username: Optional[str]
    full_name: str
    started_at: datetime
    birth_data: Optional[str] = None
    query_text: Optional[str] = None
    completed: bool = False

pending_leads: dict[int, Lead] = {}

# -------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (Reply) --------
def kb_main() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=INTRO_BTN)]],
        resize_keyboard=True
    )

def kb_intro() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BTN_FORMAT)],
            [KeyboardButton(text=BTN_SIGNUP)],
            [KeyboardButton(text=BTN_MENU)],
        ],
        resize_keyboard=True
    )

def kb_format() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BTN_BACK)],
            [KeyboardButton(text=BTN_SIGNUP)],
            [KeyboardButton(text=BTN_MENU)],
        ],
        resize_keyboard=True
    )

def kb_cancel_to_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BTN_CANCEL)],
            [KeyboardButton(text=BTN_MENU)],
        ],
        resize_keyboard=True
    )

# -------- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É --------
async def safe_send_admin(text: str):
    if not ADMIN_CHAT_ID:
        return
    try:
        await bot.send_message(ADMIN_CHAT_ID, text)
    except Exception as e:
        logging.warning(f"Admin notify failed: {e!r}")

async def notify_admin_new_attempt(lead: Lead):
    text = (
        "üü° –ù–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ (–ø–æ–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∞)\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {lead.full_name} (@{lead.username or '‚Äî'})\n"
        f"User ID: {lead.user_id}\n"
        f"–ù–∞—á–∞—Ç–æ: {lead.started_at.astimezone(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')}"
    )
    await safe_send_admin(text)

async def notify_admin_abandoned(lead: Lead):
    text = (
        "üü• –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –ù–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Ç–∞–π–º-–∞—É—Ç)\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {lead.full_name} (@{lead.username or '‚Äî'})\n"
        f"User ID: {lead.user_id}\n"
        f"–ù–∞—á–∞—Ç–æ: {lead.started_at.astimezone(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')}\n\n"
        f"–í–≤–µ–¥–µ–Ω–æ:\n"
        f"‚Äî –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è: {lead.birth_data or '‚Äî'}\n"
        f"‚Äî –ó–∞–ø—Ä–æ—Å: {lead.query_text or '‚Äî'}"
    )
    await safe_send_admin(text)

async def notify_admin_completed(lead: Lead):
    text = (
        "üü¢ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {lead.full_name} (@{lead.username or '‚Äî'})\n"
        f"User ID: {lead.user_id}\n"
        f"–ó–∞—è–≤–∫–∞:\n"
        f"‚Äî –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è: {lead.birth_data}\n"
        f"‚Äî –ó–∞–ø—Ä–æ—Å: {lead.query_text}\n"
    )
    await safe_send_admin(text)

# -------- –¢–∞–π–º-–∞—É—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ --------
ABANDON_TIMEOUT = timedelta(minutes=30)

async def schedule_abandon_check(user_id: int):
    await asyncio.sleep(ABANDON_TIMEOUT.total_seconds())
    lead = pending_leads.get(user_id)
    if lead and not lead.completed:
        await notify_admin_abandoned(lead)
        pending_leads.pop(user_id, None)

# -------- –ö–æ–º–∞–Ω–¥—ã --------
@r.message(Command("test_emoji"))
async def test_emoji(message: Message):
    await message.answer('<tg-emoji emoji-id="6008095274948366144">‚òØÔ∏è</tg-emoji>')


@r.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_main())

@r.message(Command("id"))
async def cmd_id(message: Message):
    await message.answer(f"–í–∞—à chat_id: {message.chat.id}")

# -------- –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ (Reply) --------
@r.message(F.text == INTRO_BTN)
async def on_intro(message: Message):
    await message.answer(INTRO_TEXT, reply_markup=kb_intro())

@r.message(F.text == BTN_FORMAT)
async def on_format(message: Message):
    await message.answer(FORMAT_TEXT, reply_markup=kb_format())

@r.message(F.text == BTN_BACK)
async def on_back(message: Message):
    # –ù–∞–∑–∞–¥ –∏–∑ ¬´–§–æ—Ä–º–∞—Ç –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å¬ª –∫ –∏–Ω—Ç—Ä–æ-—ç–∫—Ä–∞–Ω—É
    await message.answer(INTRO_TEXT, reply_markup=kb_intro())

@r.message(F.text == BTN_MENU)
async def on_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main())

# -------- –ó–∞–ø–∏—Å—å (Reply) --------
@r.message(F.text == BTN_SIGNUP)
async def on_signup(message: Message, state: FSMContext):
    user = message.from_user
    lead = Lead(
        user_id=user.id,
        username=user.username,
        full_name=user.full_name,
        started_at=datetime.now(timezone.utc),
    )
    pending_leads[user.id] = lead
    asyncio.create_task(schedule_abandon_check(user.id))
    await notify_admin_new_attempt(lead)

    await state.set_state(Signup.waiting_birth)
    await message.answer(ASK_BIRTH, reply_markup=kb_cancel_to_menu())

@r.message(Signup.waiting_birth, F.text == BTN_CANCEL)
@r.message(Signup.waiting_query, F.text == BTN_CANCEL)
async def on_cancel(message: Message, state: FSMContext):
    # –û—Ç–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    user_id = message.from_user.id
    pending_leads.pop(user_id, None)
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=kb_main())

@r.message(Signup.waiting_birth, F.text)
async def on_birth_data(message: Message, state: FSMContext):
    user_id = message.from_user.id
    txt = message.text.strip()
    lead = pending_leads.get(user_id)
    if not lead:
        lead = Lead(
            user_id=user_id,
            username=message.from_user.username,
            full_name=message.from_user.full_name,
            started_at=datetime.now(timezone.utc),
        )
        pending_leads[user_id] = lead
    lead.birth_data = txt
    await state.set_state(Signup.waiting_query)
    await message.answer(ASK_QUERY, reply_markup=kb_cancel_to_menu())

@r.message(Signup.waiting_query, F.text)
async def on_query(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lead = pending_leads.get(user_id)
    if not lead:
        lead = Lead(
            user_id=user_id,
            username=message.from_user.username,
            full_name=message.from_user.full_name,
            started_at=datetime.now(timezone.utc),
        )
        pending_leads[user_id] = lead

    lead.query_text = message.text.strip()
    lead.completed = True

    await notify_admin_completed(lead)
    await message.answer(THANKS, reply_markup=kb_main())

    await state.clear()
    pending_leads.pop(user_id, None)

# –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–∏—Ç –Ω–µ-—Ç–µ–∫—Å—Ç –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞
@r.message(Signup.waiting_birth)
async def on_birth_unknown(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.", reply_markup=kb_cancel_to_menu())

@r.message(Signup.waiting_query)
async def on_query_unknown(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.", reply_markup=kb_cancel_to_menu())

# -------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ --------
async def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env")
    if not ADMIN_CHAT_ID:
        logging.warning("ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
